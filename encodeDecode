#!/usr/bin/perl
use strict;
use warnings;
use DBI;

my @alphabet = split(//,"a1Qb2RcS3dU4VeW5XfY6Zg7h8i9j0kAlBmCnDoEpFqGrHsItJuKvLwMxNyOzP");
my $strAlphabet = "a1Qb2RcS3dU4VeW5XfY6Zg7h8i9j0kAlBmCnDoEpFqGrHsItJuKvLwMxNyOzP";
my $hash;
my $number;
my $dbfile = 'url.db';
my $table = 'url';
my $dbh = DBI->connect("dbi:SQLite:dbname=$dbfile","","",{RaiseError => 1},) or die $DBI::errstr;
my $length = scalar(@alphabet);


#Check if the table exists
isTable($table, $dbh);

print "What do you want to do: \n (1) Encode\n (2) Decode\n (3) Insert URL\n (4) Retrieve url\n Enter you option: ";
chomp (my $choice = <STDIN>);

if($choice == 1) #encode a string
{
	print "Enter the number to encode: ";
	chomp($number = <STDIN>);
	$hash = encode($number, @alphabet);
	print "The hash for " . $number . " is " . $hash . "\n"; 

}
elsif($choice == 2) #decode a string
{
	print "Enter the string to decode: ";
	chomp($hash = <STDIN>);
	$number = decode($hash, $strAlphabet, $length);
	print "The number for " . $hash . " is " . $number . "\n";
}
elsif($choice == 3) #insert url
{
	print "Enter the url to insert into the table: ";
	chomp(my $userURL = <STDIN>);

	#insert into table
       	my $stn = $dbh->prepare(qq{ INSERT INTO $table (url) VALUES (?) }) or die;
  	$stn->execute("$userURL") or die $dbh->errstr;

	#get last insert id
	$number = $dbh->last_insert_id('undef', 'undef', $table, 'url');

	#get hash for the row id
	$hash = encode($number, @alphabet);

	#print results
	print "The url $userURL can be found at http://lighthouse.tamucc.edu/s/$hash\n";

}
else #retrieve url
{
	#ask for the hash
	print "Enter the hash to retrieve: ";
	chomp($hash = <STDIN>);

	$number = decode($hash, $strAlphabet, $length);

	#query the id for the url
	my $stn = $dbh->prepare("select url from $table where id == ? limit 1") or die;  # not sure about dying
	$stn->execute($number) or die $dbh->errstr;
	my ($userURL) = $stn->fetchrow_array;

	#print results
	print "The url for ". $hash . " is " . $userURL . "\n";

}

##################################################################
#functions
##################################################################
sub isTable
{
	my ($table,$connection) = @_;

	#create the table if it does not exist
	$connection->do("CREATE TABLE IF NOT EXISTS $table(id INTEGER PRIMARY KEY ASC AUTOINCREMENT, url varchar(2048))");
	

}

sub encode
{
	my ($num, @alpha) = @_; #integer to convert and alphabet to use
	return "a" unless $num; #special case for zero
	my $n = scalar(@alpha); #get length of alphabet
	my $hash = ""; #string to store hash in
	while ($num > 0)
	{
		$hash .= $alpha[$num % $n ]; #append text to string from appropriate index positon
		$num = int($num / $n); #remove length of alphabet from integer since it's in the hash now
	}

	return $hash;
}

sub decode
{
	#hash to convert to int, alphabet to use, length of alphabet
	my ($hash, $alpha, $n) = @_; 

	#initialize these values
	my $num = 0; 
	my $pos = 0;
	my $letter;

	#work with the list
	my @hashlist = split //, $hash; #split it up
	@hashlist = reverse(@hashlist); #reverse the list

	#hash length
	my $len = (length($hash)-1);
	#print "length: " . $len . "\n"; #debug statement

	#go through each letter and convert
	foreach $letter (@hashlist)
	{
	#print $letter ; #debug statement
		$num += (index($alpha, $letter) * ($n ** $len));
	#print $num . "\n"; #debug statement
		$len--;
	}

	return $num;


}

#$dbh->commit;
$dbh->disconnect;
